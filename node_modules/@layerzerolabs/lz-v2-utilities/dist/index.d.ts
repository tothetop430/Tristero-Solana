import { Interface } from '@ethersproject/abi';
export { keccak256 } from '@ethersproject/keccak256';

declare function hexZeroPadTo32(addr: string): string;
declare function bytes32ToEthAddress(bytes32: string | Uint8Array): string;
declare function trim0x(str: string): string;
/**
 * Convert address to bytes32
 * @param address 0x prefixed address(20bytes or 32bytes) or solana address
 */
declare function addressToBytes32(address: string): Uint8Array;
declare function isSolanaAddress(address: string): boolean;

interface PacketPath {
    srcEid: number;
    sender: string;
    dstEid: number;
    receiver: string;
}
type PacketHeader = {
    version: number;
    nonce: string;
} & PacketPath;
type Packet = PacketHeader & {
    guid: string;
    message: string;
    payload: string;
};
interface MessageOrigin {
    srcEid: number;
    sender: string;
    nonce: string;
}
declare function packetToMessageOrigin(packet: Packet): MessageOrigin;

interface PrecrimeConfigV1 {
    version: number;
    maxBatchSize: number;
    remoteEids: number[];
    remoteAddresses: string[];
}
interface PrecrimeConfigV2 {
    version: number;
    maxBatchSize: bigint;
    peers: PreCrimePeer[];
}
type PrecrimeConfig = PrecrimeConfigV1 | PrecrimeConfigV2;
interface PrecrimePacket {
    origin: MessageOrigin;
    guid: string;
    message: string;
    callParams: string;
}
interface PreCrimePeer {
    eid: number;
    preCrimeAddress: string;
    oappAddress: string;
}

declare function parsePrecrimeConfig(precrimeConfig: string): PrecrimeConfig;

declare const parseError: (errorData: string, intf?: Interface) => ReturnType<Interface['parseError']> | string | number | undefined;

type GasLimit = string | number | bigint;
type NativeDrop = string | number | bigint;
/**
 * Enumerates the supported option types.
 */
declare enum OptionType {
    /**
     * Allows the specification of the gas allowance for the remote executor transaction, measured in destination gas
     * units.
     *
     * Format:
     * bytes  [2     32      ]
     * fields [type  extraGas]
     */
    TYPE_1 = 1,
    /**
     * Combines the functionality of TYPE_1 along with destination gas drop to a remote address.
     *
     * Format:
     * bytes  [2     32        32            bytes[]         ]
     * fields [type  extraGas  dstNativeAmt  dstNativeAddress]
     */
    TYPE_2 = 2,
    /**
     * EndpointV2 specific options.
     */
    TYPE_3 = 3
}
/**
 * Builds OptionsType.TYPE_1.
 *
 * @param {GasLimit} _extraGas The gas allowance for the remote executor transaction, measured in destination gas units.
 */
declare function optionsType1(_extraGas: GasLimit): string;
/**
 * Builds OptionsType.TYPE_2.
 *
 * @param {GasLimit} _extraGas The gas allowance for the remote executor transaction, measured in destination gas units.
 * @param {NativeDrop} _dstNativeAmt The amount of native token to be sent to the destination chain.
 * @param {string} _dstNativeAddress The destination address of _dstNativeAmt.
 */
declare function optionsType2(_extraGas: GasLimit, _dstNativeAmt: NativeDrop, _dstNativeAddress: string): string;
/**
 * Enumerates the supported worker IDs.
 */
declare enum WorkerId {
    EXECUTOR = 1,
    VERIFIER = 2,
    TREASURY = 255
}
interface WorkerOptions {
    workerId: number;
    options: Option[];
}
interface Option {
    type: number;
    params: string;
}
type VerifierOption = Option & {
    index: number;
};
/**
 * Enumerates the supported executor option types.
 */
declare enum ExecutorOptionType {
    LZ_RECEIVE = 1,
    NATIVE_DROP = 2,
    COMPOSE = 3,
    ORDERED = 4
}
/**
 * Enumerates the supported verifier option types.
 */
declare enum VerifierOptionType {
    PRECRIME = 1
}
/**
 * ExecutorLzReceiveOption type.
 */
interface ExecutorLzReceiveOption {
    gas: bigint;
    value: bigint;
}
/**
 * ExecutorNativeDropOption type.
 */
type ExecutorNativeDropOption = {
    amount: bigint;
    receiver: string;
}[];
/**
 * ComposeOption type.
 */
type ComposeOption = {
    index: number;
    gas: bigint;
    value: bigint;
}[];
/**
 * Options builder, available only for EndpointV2.
 */
declare class Options {
    protected workerOptions: WorkerOptions[];
    protected constructor();
    /**
     * Create a new options instance.
     */
    static newOptions(): Options;
    /**
     * Create an options instance from a hex string.
     * @param {string} optionsHex The hex string to decode.
     */
    static fromOptions(optionsHex: string): Options;
    /**
     * Add ExecutorOptionType.LZ_RECEIVE option.
     * @param {GasLimit} gasLimit
     * @param {NativeDrop} nativeDrop
     */
    addExecutorLzReceiveOption(gasLimit: GasLimit, nativeDrop?: NativeDrop): this;
    /**
     * Add ExecutorOptionType.NATIVE_DROP option.
     * @param {NativeDrop} nativeDrop
     * @param {string} receiver
     */
    addExecutorNativeDropOption(nativeDrop: NativeDrop, receiver: string): this;
    /**
     * Add ExecutorOptionType.COMPOSE option.
     * @param {number} index
     * @param {GasLimit} gasLimit
     * @param {NativeDrop} nativeDrop
     */
    addExecutorComposeOption(index: number, gasLimit: GasLimit, nativeDrop?: NativeDrop): this;
    /**
     * Add ExecutorOptionType.ORDERED option.
     */
    addExecutorOrderedExecutionOption(): this;
    /**
     * Add VerifierOptionType.PRECRIME option.
     * @param {number} verifierIdx
     */
    addVerifierPrecrimeOption(verifierIdx: number): this;
    /**
     * Serialize Options to hex string.
     */
    toHex(): string;
    /**
     * Serialize Options to Uint8Array.
     */
    toBytes(): Uint8Array;
    private addOption;
    /**
     * Decode ExecutorOptionType.LZ_RECEIVE option.  Returns undefined if the option is not present.
     */
    decodeExecutorLzReceiveOption(): ExecutorLzReceiveOption | undefined;
    /**
     * Decode ExecutorOptionType.NATIVE_DROP options.  Returns undefined if the options is not present.
     */
    decodeExecutorNativeDropOption(): ExecutorNativeDropOption;
    /**
     * Decode ExecutorOptionType.COMPOSE options.  Returns undefined if the options is not present.
     */
    decodeExecutorComposeOption(): ComposeOption;
    /**
     * Decode ExecutorOptionType.ORDERED options.  Returns undefined if the options is not present.
     */
    decodeExecutorOrderedExecutionOption(): boolean;
    private findOptions;
    /**
     * Find VerifierOption by verifierIdx and optionType.  Returns undefined if the option is not present.
     * @param {number} verifierIdx
     * @param {number} optionType
     */
    findVerifierOption(verifierIdx: number, optionType: number): VerifierOption | undefined;
}

declare class PacketV1Codec {
    buffer: Buffer;
    static from(payloadEncoded: string): PacketV1Codec;
    static fromBytes(payload: Uint8Array): PacketV1Codec;
    protected constructor(payloadEncoded: string);
    /**
     * encode packet to hex string
     */
    static encode(packet: Packet): string;
    /**
     * encode packet to Uint8Array
     * @param packet
     */
    static encodeBytes(packet: Packet): Uint8Array;
    version(): number;
    nonce(): string;
    srcEid(): number;
    sender(): string;
    senderAddressB20(): string;
    dstEid(): number;
    receiver(): string;
    receiverAddressB20(): string;
    guid(): string;
    message(): string;
    payloadHash(): string;
    payload(): string;
    header(): string;
    headerHash(): string;
    /**
     * deserialize packet from hex string
     * @deprecated use toPacket instead
     */
    decode(): Packet;
    toPacket(): Packet;
}
declare function calculateGuid(packetHead: PacketHeader): string;

declare class PacketSerializer {
    static serialize(packet: Packet): string;
    static serializeBytes(packet: Packet): Uint8Array;
    static deserialize(bytesLike: Uint8Array | string): Packet;
}

export { type ComposeOption, type ExecutorLzReceiveOption, type ExecutorNativeDropOption, ExecutorOptionType, type GasLimit, type MessageOrigin, type NativeDrop, type Option, OptionType, Options, type Packet, type PacketHeader, type PacketPath, PacketSerializer, PacketV1Codec, type PreCrimePeer, type PrecrimeConfig, type PrecrimeConfigV1, type PrecrimeConfigV2, type PrecrimePacket, type VerifierOption, VerifierOptionType, WorkerId, type WorkerOptions, addressToBytes32, bytes32ToEthAddress, calculateGuid, hexZeroPadTo32, isSolanaAddress, optionsType1, optionsType2, packetToMessageOrigin, parseError, parsePrecrimeConfig, trim0x };
