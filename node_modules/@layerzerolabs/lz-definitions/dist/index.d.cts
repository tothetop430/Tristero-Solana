declare enum AptosChain {
    APTOS = "aptos"
}

declare enum EvmChain {
    ETHEREUM = "ethereum",
    BSC = "bsc",
    AVALANCHE = "avalanche",
    POLYGON = "polygon",
    ZKPOLYGON = "zkpolygon",
    ARBITRUM = "arbitrum",
    OPTIMISM = "optimism",
    FANTOM = "fantom",
    SWIMMER = "swimmer",
    DFK = "dfk",
    HARMONY = "harmony",
    ARCANA = "arcana",
    DEXALOT = "dexalot",
    CASTLECRUSH = "castlecrush",
    GNOSIS = "gnosis",
    CELO = "celo",
    MOONBEAM = "moonbeam",
    BOBA = "boba",
    PORTAL = "portal",
    INTAIN = "intain",
    FUSE = "fuse",
    ASTAR = "astar",
    ZKSYNC = "zksync",
    SHRAPNEL = "shrapnel",
    DOS = "dos",
    KLAYTN = "klaytn",
    METIS = "metis",
    COREDAO = "coredao",
    OKX = "okx",
    METER = "meter",
    GOERLI = "goerli",
    BASE = "base",
    ZKCONSENSYS = "zkconsensys",
    SEPOLIA = "sepolia",
    MOONRIVER = "moonriver",
    AAVEGOTCHI = "aavegotchi",
    SCROLL = "scroll",
    CATHAY = "cathay",
    KAVA = "kava",
    TENET = "tenet",
    CANTO = "canto",
    ORDERLY = "orderly",
    NOVA = "nova",
    BLOCKGEN = "blockgen",
    MERITCIRCLE = "meritcircle",
    MANTLE = "mantle",
    HUBBLE = "hubble",
    ZORA = "zora",
    TOMO = "tomo",
    LOOT = "loot",
    TELOS = "telos",
    AURORA = "aurora",
    OPBNB = "opbnb",
    SHIMMER = "shimmer",
    MONAD = "monad",
    LIF3 = "lif3",
    SPRUCE = "spruce",
    PGJJTK = "pgjjtk",
    ODA = "oda",
    KIWI = "kiwi",
    CONFLUX = "conflux",
    EON = "eon",
    XPLA = "xpla",
    HOLESKY = "holesky",
    INJECTIVE = "injective",
    IDEX = "idex",
    ZKATANA = "zkatana",
    MANTA = "manta",
    FRAME = "frame",
    PGN = "pgn",
    POLYGONCDK = "polygoncdk",
    ARBSEP = "arbsep",
    OPTSEP = "optsep",
    BERA = "bera",
    VENN = "venn",
    RARIBLE = "rarible",
    GUNZILLA = "gunzilla",
    RC1 = "rc1",
    ETHERLINK = "etherlink",
    KIWI2 = "kiwi2",
    BB1 = "bb1",
    JOC = "joc",
    BLAST = "blast",
    TRON = "tron",
    TRONDEV = "trondev",
    XAI = "xai",
    TANGIBLE = "tangible",
    BASESEP = "basesep",
    MANTLESEP = "mantlesep",
    ZKPOLYGONSEP = "zkpolygonsep",
    ZKSYNCSEP = "zksyncsep",
    ZORASEP = "zorasep",
    EXOCORE = "exocore",
    REAL = "real",
    TILTYARD = "tiltyard",
    SKALE = "skale",
    FRAXTAL = "fraxtal",
    SEI = "sei",
    MODE = "mode",
    HEDERA = "hedera",
    UNREAL = "unreal",
    MASA = "masa",
    MERLIN = "merlin",
    HOMEVERSE = "homeverse",
    ZKASTAR = "zkastar",
    AMOY = "amoy",
    DEGEN = "degen",
    XLAYER = "xlayer",
    FORM = "form",
    LL1 = "ll1",
    MANTASEP = "mantasep",
    TAIKO = "taiko",
    ZIRCUIT = "zircuit",
    CAMP = "camp",
    OLIVE = "olive",
    SANKO = "sanko",
    BOB = "bob",
    CYBER = "cyber",
    BOTANIX = "botanix",
    XCHAIN = "xchain",
    ZKLINK = "zklink",
    EBI = "ebi",
    KINTO = "kinto",
    LINEASEP = "lineasep",
    IOTA = "iota",
    BESU1 = "besu1",
    BOUNCEBIT = "bouncebit",
    MORPH = "morph"
}

declare enum SolanaChain {
    SOLANA = "solana"
}

type Chain = EvmChain | AptosChain | SolanaChain;
declare const Chain: {
    SOLANA: SolanaChain.SOLANA;
    APTOS: AptosChain.APTOS;
    ETHEREUM: EvmChain.ETHEREUM;
    BSC: EvmChain.BSC;
    AVALANCHE: EvmChain.AVALANCHE;
    POLYGON: EvmChain.POLYGON;
    ZKPOLYGON: EvmChain.ZKPOLYGON;
    ARBITRUM: EvmChain.ARBITRUM;
    OPTIMISM: EvmChain.OPTIMISM;
    FANTOM: EvmChain.FANTOM;
    SWIMMER: EvmChain.SWIMMER;
    DFK: EvmChain.DFK;
    HARMONY: EvmChain.HARMONY;
    ARCANA: EvmChain.ARCANA;
    DEXALOT: EvmChain.DEXALOT;
    CASTLECRUSH: EvmChain.CASTLECRUSH;
    GNOSIS: EvmChain.GNOSIS;
    CELO: EvmChain.CELO;
    MOONBEAM: EvmChain.MOONBEAM;
    BOBA: EvmChain.BOBA;
    PORTAL: EvmChain.PORTAL;
    INTAIN: EvmChain.INTAIN;
    FUSE: EvmChain.FUSE;
    ASTAR: EvmChain.ASTAR;
    ZKSYNC: EvmChain.ZKSYNC;
    SHRAPNEL: EvmChain.SHRAPNEL;
    DOS: EvmChain.DOS;
    KLAYTN: EvmChain.KLAYTN;
    METIS: EvmChain.METIS;
    COREDAO: EvmChain.COREDAO;
    OKX: EvmChain.OKX;
    METER: EvmChain.METER;
    GOERLI: EvmChain.GOERLI;
    BASE: EvmChain.BASE;
    ZKCONSENSYS: EvmChain.ZKCONSENSYS;
    SEPOLIA: EvmChain.SEPOLIA;
    MOONRIVER: EvmChain.MOONRIVER;
    AAVEGOTCHI: EvmChain.AAVEGOTCHI;
    SCROLL: EvmChain.SCROLL;
    CATHAY: EvmChain.CATHAY;
    KAVA: EvmChain.KAVA;
    TENET: EvmChain.TENET;
    CANTO: EvmChain.CANTO;
    ORDERLY: EvmChain.ORDERLY;
    NOVA: EvmChain.NOVA;
    BLOCKGEN: EvmChain.BLOCKGEN;
    MERITCIRCLE: EvmChain.MERITCIRCLE;
    MANTLE: EvmChain.MANTLE;
    HUBBLE: EvmChain.HUBBLE;
    ZORA: EvmChain.ZORA;
    TOMO: EvmChain.TOMO;
    LOOT: EvmChain.LOOT;
    TELOS: EvmChain.TELOS;
    AURORA: EvmChain.AURORA;
    OPBNB: EvmChain.OPBNB;
    SHIMMER: EvmChain.SHIMMER;
    MONAD: EvmChain.MONAD;
    LIF3: EvmChain.LIF3;
    SPRUCE: EvmChain.SPRUCE;
    PGJJTK: EvmChain.PGJJTK;
    ODA: EvmChain.ODA;
    KIWI: EvmChain.KIWI;
    CONFLUX: EvmChain.CONFLUX;
    EON: EvmChain.EON;
    XPLA: EvmChain.XPLA;
    HOLESKY: EvmChain.HOLESKY;
    INJECTIVE: EvmChain.INJECTIVE;
    IDEX: EvmChain.IDEX;
    ZKATANA: EvmChain.ZKATANA;
    MANTA: EvmChain.MANTA;
    FRAME: EvmChain.FRAME;
    PGN: EvmChain.PGN;
    POLYGONCDK: EvmChain.POLYGONCDK;
    ARBSEP: EvmChain.ARBSEP;
    OPTSEP: EvmChain.OPTSEP;
    BERA: EvmChain.BERA;
    VENN: EvmChain.VENN;
    RARIBLE: EvmChain.RARIBLE;
    GUNZILLA: EvmChain.GUNZILLA;
    RC1: EvmChain.RC1;
    ETHERLINK: EvmChain.ETHERLINK;
    KIWI2: EvmChain.KIWI2;
    BB1: EvmChain.BB1;
    JOC: EvmChain.JOC;
    BLAST: EvmChain.BLAST;
    TRON: EvmChain.TRON;
    TRONDEV: EvmChain.TRONDEV;
    XAI: EvmChain.XAI;
    TANGIBLE: EvmChain.TANGIBLE;
    BASESEP: EvmChain.BASESEP;
    MANTLESEP: EvmChain.MANTLESEP;
    ZKPOLYGONSEP: EvmChain.ZKPOLYGONSEP;
    ZKSYNCSEP: EvmChain.ZKSYNCSEP;
    ZORASEP: EvmChain.ZORASEP;
    EXOCORE: EvmChain.EXOCORE;
    REAL: EvmChain.REAL;
    TILTYARD: EvmChain.TILTYARD;
    SKALE: EvmChain.SKALE;
    FRAXTAL: EvmChain.FRAXTAL;
    SEI: EvmChain.SEI;
    MODE: EvmChain.MODE;
    HEDERA: EvmChain.HEDERA;
    UNREAL: EvmChain.UNREAL;
    MASA: EvmChain.MASA;
    MERLIN: EvmChain.MERLIN;
    HOMEVERSE: EvmChain.HOMEVERSE;
    ZKASTAR: EvmChain.ZKASTAR;
    AMOY: EvmChain.AMOY;
    DEGEN: EvmChain.DEGEN;
    XLAYER: EvmChain.XLAYER;
    FORM: EvmChain.FORM;
    LL1: EvmChain.LL1;
    MANTASEP: EvmChain.MANTASEP;
    TAIKO: EvmChain.TAIKO;
    ZIRCUIT: EvmChain.ZIRCUIT;
    CAMP: EvmChain.CAMP;
    OLIVE: EvmChain.OLIVE;
    SANKO: EvmChain.SANKO;
    BOB: EvmChain.BOB;
    CYBER: EvmChain.CYBER;
    BOTANIX: EvmChain.BOTANIX;
    XCHAIN: EvmChain.XCHAIN;
    ZKLINK: EvmChain.ZKLINK;
    EBI: EvmChain.EBI;
    KINTO: EvmChain.KINTO;
    LINEASEP: EvmChain.LINEASEP;
    IOTA: EvmChain.IOTA;
    BESU1: EvmChain.BESU1;
    BOUNCEBIT: EvmChain.BOUNCEBIT;
    MORPH: EvmChain.MORPH;
};

declare enum ChainType {
    UNKNOWN = "unknown",
    EVM = "evm",
    APTOS = "aptos",
    SOLANA = "solana"
}

declare const EndpointV2IdBase = 30000;
declare enum MainnetEndpointId {
    ETHEREUM_MAINNET = 101,
    BSC_MAINNET = 102,
    AVALANCHE_MAINNET = 106,
    POLYGON_MAINNET = 109,
    ARBITRUM_MAINNET = 110,
    OPTIMISM_MAINNET = 111,
    FANTOM_MAINNET = 112,
    SWIMMER_MAINNET = 114,
    DFK_MAINNET = 115,
    HARMONY_MAINNET = 116,
    DEXALOT_MAINNET = 118,
    CELO_MAINNET = 125,
    MOONBEAM_MAINNET = 126,
    INTAIN_MAINNET = 152,
    FUSE_MAINNET = 138,
    GNOSIS_MAINNET = 145,
    APTOS_MAINNET = 108,
    KLAYTN_MAINNET = 150,
    METIS_MAINNET = 151,
    COREDAO_MAINNET = 153,
    GOERLI_MAINNET = 154,
    OKX_MAINNET = 155,
    CANTO_MAINNET = 159,
    ZKSYNC_MAINNET = 165,
    SHRAPNEL_MAINNET = 148,
    DOS_MAINNET = 149,
    ZKPOLYGON_MAINNET = 158,
    SEPOLIA_MAINNET = 161,
    MOONRIVER_MAINNET = 167,
    SOLANA_MAINNET = 168,
    TENET_MAINNET = 173,
    NOVA_MAINNET = 175,
    METER_MAINNET = 176,
    KAVA_MAINNET = 177,
    MANTLE_MAINNET = 181,
    HUBBLE_MAINNET = 182,
    ZKCONSENSYS_MAINNET = 183,
    BASE_MAINNET = 184,
    ZORA_MAINNET = 195,
    TOMO_MAINNET = 196,
    LOOT_MAINNET = 197,
    MERITCIRCLE_MAINNET = 198,
    TELOS_MAINNET = 199,
    OPBNB_MAINNET = 202,
    LIF3_MAINNET = 205,
    ASTAR_MAINNET = 210,
    AURORA_MAINNET = 211,
    CONFLUX_MAINNET = 212,
    ORDERLY_MAINNET = 213,
    SCROLL_MAINNET = 214,
    EON_MAINNET = 215,
    XPLA_MAINNET = 216,
    MANTA_MAINNET = 217,
    PGN_MAINNET = 218,
    SHIMMER_MAINNET = 230,
    BB1_MAINNET = 234,
    RARIBLE_MAINNET = 235,
    XAI_MAINNET = 236,
    REAL_MAINNET = 237,
    TILTYARD_MAINNET = 238,
    FRAXTAL_MAINNET = 255,
    TRON_MAINNET = 420,
    ZKATANA_MAINNET = 257,
    BLAST_MAINNET = 243,
    MODE_MAINNET = 260,
    MASA_MAINNET = 263,
    HOMEVERSE_MAINNET = 265,
    MERLIN_MAINNET = 266,
    DEGEN_MAINNET = 267,
    SKALE_MAINNET = 273,
    XLAYER_MAINNET = 274,
    SANKO_MAINNET = 278,
    BOB_MAINNET = 279,
    SEI_MAINNET = 280,
    EBI_MAINNET = 282,
    CYBER_MAINNET = 283,
    IOTA_MAINNET = 284,
    KINTO_MAINNET = 281,
    JOC_MAINNET = 285,
    TAIKO_MAINNET = 290,
    XCHAIN_MAINNET = 291,
    ETHERLINK_MAINNET = 292
}
declare enum TestnetEndpointId {
    BSC_TESTNET = 10102,
    AVALANCHE_TESTNET = 10106,
    POLYGON_TESTNET = 10109,
    FANTOM_TESTNET = 10112,
    SWIMMER_TESTNET = 10130,
    DFK_TESTNET = 10115,
    HARMONY_TESTNET = 10133,
    DEXALOT_TESTNET = 10118,
    CELO_TESTNET = 10125,
    MOONBEAM_TESTNET = 10126,
    INTAIN_TESTNET = 10152,
    ETHEREUM_TESTNET = 10121,
    ARBITRUM_TESTNET = 10143,
    OPTIMISM_TESTNET = 10132,
    FUSE_TESTNET = 10138,
    GNOSIS_TESTNET = 10145,
    ZKSYNC_TESTNET = 10165,
    SHRAPNEL_TESTNET = 10164,
    DOS_TESTNET = 10162,
    APTOS_TESTNET = 10108,
    KLAYTN_TESTNET = 10150,
    METIS_TESTNET = 10151,
    COREDAO_TESTNET = 10153,
    OKX_TESTNET = 10155,
    METER_TESTNET = 10156,
    ZKCONSENSYS_TESTNET = 10157,
    ZKPOLYGON_TESTNET = 10158,
    CANTO_TESTNET = 10159,
    BASE_TESTNET = 10160,
    SEPOLIA_TESTNET = 10161,
    SOLANA_TESTNET = 10168,
    CATHAY_TESTNET = 10171,
    KAVA_TESTNET = 10172,
    TENET_TESTNET = 10173,
    BLOCKGEN_TESTNET = 10177,
    MERITCIRCLE_TESTNET = 10178,
    MANTLE_TESTNET = 10181,
    HUBBLE_TESTNET = 10182,
    AAVEGOTCHI_TESTNET = 10191,
    ZORA_TESTNET = 10195,
    TOMO_TESTNET = 10196,
    LOOT_TESTNET = 10197,
    TELOS_TESTNET = 10199,
    ORDERLY_TESTNET = 10200,
    AURORA_TESTNET = 10201,
    OPBNB_TESTNET = 10202,
    MONAD_TESTNET = 10204,
    LIF3_TESTNET = 10205,
    SPRUCE_TESTNET = 10206,
    PGJJTK_TESTNET = 10207,
    ODA_TESTNET = 10208,
    KIWI_TESTNET = 10209,
    ASTAR_TESTNET = 10210,
    CONFLUX_TESTNET = 10211,
    SCROLL_TESTNET = 10214,
    EON_TESTNET = 10215,
    XPLA_TESTNET = 10216,
    HOLESKY_TESTNET = 10217,
    INJECTIVE_TESTNET = 10218,
    IDEX_TESTNET = 10219,
    ZKATANA_TESTNET = 10220,
    MANTA_TESTNET = 10221,
    FRAME_TESTNET = 10222,
    PGN_TESTNET = 10223,
    POLYGONCDK_TESTNET = 10224,
    SHIMMER_TESTNET = 10230,
    ARBSEP_TESTNET = 10231,
    OPTSEP_TESTNET = 10232,
    VENN_TESTNET = 10234,
    RARIBLE_TESTNET = 10235,
    GUNZILLA_TESTNET = 10236,
    RC1_TESTNET = 10238,
    ETHERLINK_TESTNET = 10239,
    KIWI2_TESTNET = 10241,
    JOC_TESTNET = 10242,
    BLAST_TESTNET = 10243,
    BASESEP_TESTNET = 10245,
    MANTLESEP_TESTNET = 10246,
    ZKPOLYGONSEP_TESTNET = 10247,
    ZKSYNCSEP_TESTNET = 10248,
    ZORASEP_TESTNET = 10249,
    XAI_TESTNET = 10251,
    TANGIBLE_TESTNET = 10252,
    TRON_TESTNET = 10420,
    FRAXTAL_TESTNET = 10255,
    BERA_TESTNET = 10256,
    SEI_TESTNET = 10258,
    EXOCORE_TESTNET = 10259,
    MODE_TESTNET = 10260,
    UNREAL_TESTNET = 10262,
    MASA_TESTNET = 10263,
    MERLIN_TESTNET = 10264,
    HOMEVERSE_TESTNET = 10265,
    ZKASTAR_TESTNET = 10266,
    AMOY_TESTNET = 10267,
    DEGEN_TESTNET = 10268,
    XLAYER_TESTNET = 10269,
    FORM_TESTNET = 10270,
    LL1_TESTNET = 10271,
    MANTASEP_TESTNET = 10272,
    SKALE_TESTNET = 10273,
    TAIKO_TESTNET = 10274,
    ZIRCUIT_TESTNET = 10275,
    CAMP_TESTNET = 10276,
    OLIVE_TESTNET = 10277,
    SANKO_TESTNET = 10278,
    BOB_TESTNET = 10279,
    CYBER_TESTNET = 10280,
    BOTANIX_TESTNET = 10281,
    XCHAIN_TESTNET = 10282,
    ZKLINK_TESTNET = 10283,
    EBI_TESTNET = 10284,
    HEDERA_TESTNET = 10285,
    LINEASEP_TESTNET = 10286,
    BESU1_TESTNET = 10288,
    BOUNCEBIT_TESTNET = 10289,
    MORPH_TESTNET = 10290
}
declare enum SandboxEndpointId {
    BSC_SANDBOX = 20102,
    AVALANCHE_SANDBOX = 20106,
    POLYGON_SANDBOX = 20109,
    ETHEREUM_SANDBOX = 20121,
    APTOS_SANDBOX = 20008,
    OPTIMISM_SANDBOX = 20132,
    TRON_SANDBOX = 20420,
    TRONDEV_SANDBOX = 20421,
    ARBITRUM_SANDBOX = 20231,
    FANTOM_SANDBOX = 20112,
    METIS_SANDBOX = 20151
}
declare enum MainnetV2EndpointId {
    ETHEREUM_V2_MAINNET = 30101,
    BSC_V2_MAINNET = 30102,
    AVALANCHE_V2_MAINNET = 30106,
    POLYGON_V2_MAINNET = 30109,
    ARBITRUM_V2_MAINNET = 30110,
    OPTIMISM_V2_MAINNET = 30111,
    FANTOM_V2_MAINNET = 30112,
    SWIMMER_V2_MAINNET = 30114,
    DFK_V2_MAINNET = 30115,
    HARMONY_V2_MAINNET = 30116,
    DEXALOT_V2_MAINNET = 30118,
    CELO_V2_MAINNET = 30125,
    MOONBEAM_V2_MAINNET = 30126,
    INTAIN_V2_MAINNET = 30152,
    FUSE_V2_MAINNET = 30138,
    GNOSIS_V2_MAINNET = 30145,
    KLAYTN_V2_MAINNET = 30150,
    METIS_V2_MAINNET = 30151,
    COREDAO_V2_MAINNET = 30153,
    GOERLI_V2_MAINNET = 30154,
    OKX_V2_MAINNET = 30155,
    CANTO_V2_MAINNET = 30159,
    ZKSYNC_V2_MAINNET = 30165,
    SHRAPNEL_V2_MAINNET = 30148,
    DOS_V2_MAINNET = 30149,
    ZKPOLYGON_V2_MAINNET = 30158,
    SEPOLIA_V2_MAINNET = 30161,
    MOONRIVER_V2_MAINNET = 30167,
    TENET_V2_MAINNET = 30173,
    NOVA_V2_MAINNET = 30175,
    METER_V2_MAINNET = 30176,
    KAVA_V2_MAINNET = 30177,
    MANTLE_V2_MAINNET = 30181,
    HUBBLE_V2_MAINNET = 30182,
    ZKCONSENSYS_V2_MAINNET = 30183,
    BASE_V2_MAINNET = 30184,
    ZORA_V2_MAINNET = 30195,
    TOMO_V2_MAINNET = 30196,
    LOOT_V2_MAINNET = 30197,
    MERITCIRCLE_V2_MAINNET = 30198,
    TELOS_V2_MAINNET = 30199,
    OPBNB_V2_MAINNET = 30202,
    LIF3_V2_MAINNET = 30205,
    ASTAR_V2_MAINNET = 30210,
    AURORA_V2_MAINNET = 30211,
    CONFLUX_V2_MAINNET = 30212,
    ORDERLY_V2_MAINNET = 30213,
    SCROLL_V2_MAINNET = 30214,
    EON_V2_MAINNET = 30215,
    XPLA_V2_MAINNET = 30216,
    MANTA_V2_MAINNET = 30217,
    PGN_V2_MAINNET = 30218,
    SHIMMER_V2_MAINNET = 30230,
    BB1_V2_MAINNET = 30234,
    RARIBLE_V2_MAINNET = 30235,
    XAI_V2_MAINNET = 30236,
    REAL_V2_MAINNET = 30237,
    TILTYARD_V2_MAINNET = 30238,
    FRAXTAL_V2_MAINNET = 30255,
    TRON_V2_MAINNET = 30420,
    ZKATANA_V2_MAINNET = 30257,
    BLAST_V2_MAINNET = 30243,
    MODE_V2_MAINNET = 30260,
    MASA_V2_MAINNET = 30263,
    HOMEVERSE_V2_MAINNET = 30265,
    MERLIN_V2_MAINNET = 30266,
    DEGEN_V2_MAINNET = 30267,
    SKALE_V2_MAINNET = 30273,
    XLAYER_V2_MAINNET = 30274,
    SANKO_V2_MAINNET = 30278,
    BOB_V2_MAINNET = 30279,
    SEI_V2_MAINNET = 30280,
    EBI_V2_MAINNET = 30282,
    CYBER_V2_MAINNET = 30283,
    IOTA_V2_MAINNET = 30284,
    SOLANA_V2_MAINNET = 30168,
    KINTO_V2_MAINNET = 30281,
    JOC_V2_MAINNET = 30285,
    TAIKO_V2_MAINNET = 30290,
    XCHAIN_V2_MAINNET = 30291,
    ETHERLINK_V2_MAINNET = 30292
}
declare enum TestnetV2EndpointId {
    AVALANCHE_V2_TESTNET = 40106,
    POLYGON_V2_TESTNET = 40109,
    ETHEREUM_V2_TESTNET = 40121,
    OPTIMISM_V2_TESTNET = 40132,
    ARBITRUM_V2_TESTNET = 40143,
    BSC_V2_TESTNET = 40102,
    FANTOM_V2_TESTNET = 40112,
    DFK_V2_TESTNET = 40115,
    HARMONY_V2_TESTNET = 40133,
    DEXALOT_V2_TESTNET = 40118,
    CELO_V2_TESTNET = 40125,
    MOONBEAM_V2_TESTNET = 40126,
    FUSE_V2_TESTNET = 40138,
    GNOSIS_V2_TESTNET = 40145,
    ZKSYNC_V2_TESTNET = 40165,
    SHRAPNEL_V2_TESTNET = 40164,
    KLAYTN_V2_TESTNET = 40150,
    METIS_V2_TESTNET = 40151,
    COREDAO_V2_TESTNET = 40153,
    OKX_V2_TESTNET = 40155,
    METER_V2_TESTNET = 40156,
    ZKCONSENSYS_V2_TESTNET = 40157,
    ZKPOLYGON_V2_TESTNET = 40158,
    CANTO_V2_TESTNET = 40159,
    BASE_V2_TESTNET = 40160,
    SEPOLIA_V2_TESTNET = 40161,
    AAVEGOTCHI_V2_TESTNET = 40179,
    SCROLL_V2_TESTNET = 40170,
    CATHAY_V2_TESTNET = 40171,
    KAVA_V2_TESTNET = 40172,
    TENET_V2_TESTNET = 40173,
    BLOCKGEN_V2_TESTNET = 40177,
    MERITCIRCLE_V2_TESTNET = 40178,
    MANTLE_V2_TESTNET = 40181,
    HUBBLE_V2_TESTNET = 40182,
    ZORA_V2_TESTNET = 40195,
    TOMO_V2_TESTNET = 40196,
    LOOT_V2_TESTNET = 40197,
    TELOS_V2_TESTNET = 40199,
    ORDERLY_V2_TESTNET = 40200,
    AURORA_V2_TESTNET = 40201,
    OPBNB_V2_TESTNET = 40202,
    SHIMMER_V2_TESTNET = 40203,
    MONAD_V2_TESTNET = 40204,
    LIF3_V2_TESTNET = 40205,
    SPRUCE_V2_TESTNET = 40206,
    PGJJTK_V2_TESTNET = 40207,
    ODA_V2_TESTNET = 40208,
    KIWI_V2_TESTNET = 40209,
    ASTAR_V2_TESTNET = 40210,
    CONFLUX_V2_TESTNET = 40211,
    EON_V2_TESTNET = 40215,
    XPLA_V2_TESTNET = 40216,
    HOLESKY_V2_TESTNET = 40217,
    INJECTIVE_V2_TESTNET = 40218,
    IDEX_V2_TESTNET = 40219,
    ZKATANA_V2_TESTNET = 40220,
    MANTA_V2_TESTNET = 40221,
    FRAME_V2_TESTNET = 40222,
    PGN_V2_TESTNET = 40223,
    POLYGONCDK_V2_TESTNET = 40224,
    ARBSEP_V2_TESTNET = 40231,
    OPTSEP_V2_TESTNET = 40232,
    VENN_V2_TESTNET = 40234,
    RARIBLE_V2_TESTNET = 40235,
    GUNZILLA_V2_TESTNET = 40236,
    RC1_V2_TESTNET = 40238,
    ETHERLINK_V2_TESTNET = 40239,
    KIWI2_V2_TESTNET = 40241,
    JOC_V2_TESTNET = 40242,
    BLAST_V2_TESTNET = 40243,
    BASESEP_V2_TESTNET = 40245,
    MANTLESEP_V2_TESTNET = 40246,
    ZKPOLYGONSEP_V2_TESTNET = 40247,
    ZKSYNCSEP_V2_TESTNET = 40248,
    ZORASEP_V2_TESTNET = 40249,
    XAI_V2_TESTNET = 40251,
    TANGIBLE_V2_TESTNET = 40252,
    EXOCORE_V2_TESTNET = 40259,
    TRON_V2_TESTNET = 40420,
    FRAXTAL_V2_TESTNET = 40255,
    BERA_V2_TESTNET = 40256,
    SEI_V2_TESTNET = 40258,
    MODE_V2_TESTNET = 40260,
    UNREAL_V2_TESTNET = 40262,
    MASA_V2_TESTNET = 40263,
    MERLIN_V2_TESTNET = 40264,
    HOMEVERSE_V2_TESTNET = 40265,
    ZKASTAR_V2_TESTNET = 40266,
    AMOY_V2_TESTNET = 40267,
    DEGEN_V2_TESTNET = 40268,
    XLAYER_V2_TESTNET = 40269,
    FORM_V2_TESTNET = 40270,
    LL1_V2_TESTNET = 40271,
    MANTASEP_V2_TESTNET = 40272,
    SKALE_V2_TESTNET = 40273,
    TAIKO_V2_TESTNET = 40274,
    ZIRCUIT_V2_TESTNET = 40275,
    CAMP_V2_TESTNET = 40276,
    OLIVE_V2_TESTNET = 40277,
    SANKO_V2_TESTNET = 40278,
    BOB_V2_TESTNET = 40279,
    CYBER_V2_TESTNET = 40280,
    BOTANIX_V2_TESTNET = 40281,
    XCHAIN_V2_TESTNET = 40282,
    ZKLINK_V2_TESTNET = 40283,
    EBI_V2_TESTNET = 40284,
    HEDERA_V2_TESTNET = 40285,
    DOS_V2_TESTNET = 40286,
    LINEASEP_V2_TESTNET = 40287,
    BESU1_V2_TESTNET = 40288,
    BOUNCEBIT_V2_TESTNET = 40289,
    MORPH_V2_TESTNET = 40290,
    SOLANA_V2_TESTNET = 40168
}
declare enum SandboxV2EndpointId {
    ETHEREUM_V2_SANDBOX = 50121,
    POLYGON_V2_SANDBOX = 50109,
    SOLANA_V2_SANDBOX = 50168,
    BSC_V2_SANDBOX = 50102,
    AVALANCHE_V2_SANDBOX = 50106,
    OPTIMISM_V2_SANDBOX = 50132,
    METIS_V2_SANDBOX = 50151
}
declare const EndpointId: {
    [x: number]: string;
    ETHEREUM_V2_SANDBOX: SandboxV2EndpointId.ETHEREUM_V2_SANDBOX;
    POLYGON_V2_SANDBOX: SandboxV2EndpointId.POLYGON_V2_SANDBOX;
    SOLANA_V2_SANDBOX: SandboxV2EndpointId.SOLANA_V2_SANDBOX;
    BSC_V2_SANDBOX: SandboxV2EndpointId.BSC_V2_SANDBOX;
    AVALANCHE_V2_SANDBOX: SandboxV2EndpointId.AVALANCHE_V2_SANDBOX;
    OPTIMISM_V2_SANDBOX: SandboxV2EndpointId.OPTIMISM_V2_SANDBOX;
    METIS_V2_SANDBOX: SandboxV2EndpointId.METIS_V2_SANDBOX;
    AVALANCHE_V2_TESTNET: TestnetV2EndpointId.AVALANCHE_V2_TESTNET;
    POLYGON_V2_TESTNET: TestnetV2EndpointId.POLYGON_V2_TESTNET;
    ETHEREUM_V2_TESTNET: TestnetV2EndpointId.ETHEREUM_V2_TESTNET;
    OPTIMISM_V2_TESTNET: TestnetV2EndpointId.OPTIMISM_V2_TESTNET;
    ARBITRUM_V2_TESTNET: TestnetV2EndpointId.ARBITRUM_V2_TESTNET;
    BSC_V2_TESTNET: TestnetV2EndpointId.BSC_V2_TESTNET;
    FANTOM_V2_TESTNET: TestnetV2EndpointId.FANTOM_V2_TESTNET;
    DFK_V2_TESTNET: TestnetV2EndpointId.DFK_V2_TESTNET;
    HARMONY_V2_TESTNET: TestnetV2EndpointId.HARMONY_V2_TESTNET;
    DEXALOT_V2_TESTNET: TestnetV2EndpointId.DEXALOT_V2_TESTNET;
    CELO_V2_TESTNET: TestnetV2EndpointId.CELO_V2_TESTNET;
    MOONBEAM_V2_TESTNET: TestnetV2EndpointId.MOONBEAM_V2_TESTNET;
    FUSE_V2_TESTNET: TestnetV2EndpointId.FUSE_V2_TESTNET;
    GNOSIS_V2_TESTNET: TestnetV2EndpointId.GNOSIS_V2_TESTNET;
    ZKSYNC_V2_TESTNET: TestnetV2EndpointId.ZKSYNC_V2_TESTNET;
    SHRAPNEL_V2_TESTNET: TestnetV2EndpointId.SHRAPNEL_V2_TESTNET;
    KLAYTN_V2_TESTNET: TestnetV2EndpointId.KLAYTN_V2_TESTNET;
    METIS_V2_TESTNET: TestnetV2EndpointId.METIS_V2_TESTNET;
    COREDAO_V2_TESTNET: TestnetV2EndpointId.COREDAO_V2_TESTNET;
    OKX_V2_TESTNET: TestnetV2EndpointId.OKX_V2_TESTNET;
    METER_V2_TESTNET: TestnetV2EndpointId.METER_V2_TESTNET;
    ZKCONSENSYS_V2_TESTNET: TestnetV2EndpointId.ZKCONSENSYS_V2_TESTNET;
    ZKPOLYGON_V2_TESTNET: TestnetV2EndpointId.ZKPOLYGON_V2_TESTNET;
    CANTO_V2_TESTNET: TestnetV2EndpointId.CANTO_V2_TESTNET;
    BASE_V2_TESTNET: TestnetV2EndpointId.BASE_V2_TESTNET;
    SEPOLIA_V2_TESTNET: TestnetV2EndpointId.SEPOLIA_V2_TESTNET;
    AAVEGOTCHI_V2_TESTNET: TestnetV2EndpointId.AAVEGOTCHI_V2_TESTNET;
    SCROLL_V2_TESTNET: TestnetV2EndpointId.SCROLL_V2_TESTNET;
    CATHAY_V2_TESTNET: TestnetV2EndpointId.CATHAY_V2_TESTNET;
    KAVA_V2_TESTNET: TestnetV2EndpointId.KAVA_V2_TESTNET;
    TENET_V2_TESTNET: TestnetV2EndpointId.TENET_V2_TESTNET;
    BLOCKGEN_V2_TESTNET: TestnetV2EndpointId.BLOCKGEN_V2_TESTNET;
    MERITCIRCLE_V2_TESTNET: TestnetV2EndpointId.MERITCIRCLE_V2_TESTNET;
    MANTLE_V2_TESTNET: TestnetV2EndpointId.MANTLE_V2_TESTNET;
    HUBBLE_V2_TESTNET: TestnetV2EndpointId.HUBBLE_V2_TESTNET;
    ZORA_V2_TESTNET: TestnetV2EndpointId.ZORA_V2_TESTNET;
    TOMO_V2_TESTNET: TestnetV2EndpointId.TOMO_V2_TESTNET;
    LOOT_V2_TESTNET: TestnetV2EndpointId.LOOT_V2_TESTNET;
    TELOS_V2_TESTNET: TestnetV2EndpointId.TELOS_V2_TESTNET;
    ORDERLY_V2_TESTNET: TestnetV2EndpointId.ORDERLY_V2_TESTNET;
    AURORA_V2_TESTNET: TestnetV2EndpointId.AURORA_V2_TESTNET;
    OPBNB_V2_TESTNET: TestnetV2EndpointId.OPBNB_V2_TESTNET;
    SHIMMER_V2_TESTNET: TestnetV2EndpointId.SHIMMER_V2_TESTNET;
    MONAD_V2_TESTNET: TestnetV2EndpointId.MONAD_V2_TESTNET;
    LIF3_V2_TESTNET: TestnetV2EndpointId.LIF3_V2_TESTNET;
    SPRUCE_V2_TESTNET: TestnetV2EndpointId.SPRUCE_V2_TESTNET;
    PGJJTK_V2_TESTNET: TestnetV2EndpointId.PGJJTK_V2_TESTNET;
    ODA_V2_TESTNET: TestnetV2EndpointId.ODA_V2_TESTNET;
    KIWI_V2_TESTNET: TestnetV2EndpointId.KIWI_V2_TESTNET;
    ASTAR_V2_TESTNET: TestnetV2EndpointId.ASTAR_V2_TESTNET;
    CONFLUX_V2_TESTNET: TestnetV2EndpointId.CONFLUX_V2_TESTNET;
    EON_V2_TESTNET: TestnetV2EndpointId.EON_V2_TESTNET;
    XPLA_V2_TESTNET: TestnetV2EndpointId.XPLA_V2_TESTNET;
    HOLESKY_V2_TESTNET: TestnetV2EndpointId.HOLESKY_V2_TESTNET;
    INJECTIVE_V2_TESTNET: TestnetV2EndpointId.INJECTIVE_V2_TESTNET;
    IDEX_V2_TESTNET: TestnetV2EndpointId.IDEX_V2_TESTNET;
    ZKATANA_V2_TESTNET: TestnetV2EndpointId.ZKATANA_V2_TESTNET;
    MANTA_V2_TESTNET: TestnetV2EndpointId.MANTA_V2_TESTNET;
    FRAME_V2_TESTNET: TestnetV2EndpointId.FRAME_V2_TESTNET;
    PGN_V2_TESTNET: TestnetV2EndpointId.PGN_V2_TESTNET;
    POLYGONCDK_V2_TESTNET: TestnetV2EndpointId.POLYGONCDK_V2_TESTNET;
    ARBSEP_V2_TESTNET: TestnetV2EndpointId.ARBSEP_V2_TESTNET;
    OPTSEP_V2_TESTNET: TestnetV2EndpointId.OPTSEP_V2_TESTNET;
    VENN_V2_TESTNET: TestnetV2EndpointId.VENN_V2_TESTNET;
    RARIBLE_V2_TESTNET: TestnetV2EndpointId.RARIBLE_V2_TESTNET;
    GUNZILLA_V2_TESTNET: TestnetV2EndpointId.GUNZILLA_V2_TESTNET;
    RC1_V2_TESTNET: TestnetV2EndpointId.RC1_V2_TESTNET;
    ETHERLINK_V2_TESTNET: TestnetV2EndpointId.ETHERLINK_V2_TESTNET;
    KIWI2_V2_TESTNET: TestnetV2EndpointId.KIWI2_V2_TESTNET;
    JOC_V2_TESTNET: TestnetV2EndpointId.JOC_V2_TESTNET;
    BLAST_V2_TESTNET: TestnetV2EndpointId.BLAST_V2_TESTNET;
    BASESEP_V2_TESTNET: TestnetV2EndpointId.BASESEP_V2_TESTNET;
    MANTLESEP_V2_TESTNET: TestnetV2EndpointId.MANTLESEP_V2_TESTNET;
    ZKPOLYGONSEP_V2_TESTNET: TestnetV2EndpointId.ZKPOLYGONSEP_V2_TESTNET;
    ZKSYNCSEP_V2_TESTNET: TestnetV2EndpointId.ZKSYNCSEP_V2_TESTNET;
    ZORASEP_V2_TESTNET: TestnetV2EndpointId.ZORASEP_V2_TESTNET;
    XAI_V2_TESTNET: TestnetV2EndpointId.XAI_V2_TESTNET;
    TANGIBLE_V2_TESTNET: TestnetV2EndpointId.TANGIBLE_V2_TESTNET;
    EXOCORE_V2_TESTNET: TestnetV2EndpointId.EXOCORE_V2_TESTNET;
    TRON_V2_TESTNET: TestnetV2EndpointId.TRON_V2_TESTNET;
    FRAXTAL_V2_TESTNET: TestnetV2EndpointId.FRAXTAL_V2_TESTNET;
    BERA_V2_TESTNET: TestnetV2EndpointId.BERA_V2_TESTNET;
    SEI_V2_TESTNET: TestnetV2EndpointId.SEI_V2_TESTNET;
    MODE_V2_TESTNET: TestnetV2EndpointId.MODE_V2_TESTNET;
    UNREAL_V2_TESTNET: TestnetV2EndpointId.UNREAL_V2_TESTNET;
    MASA_V2_TESTNET: TestnetV2EndpointId.MASA_V2_TESTNET;
    MERLIN_V2_TESTNET: TestnetV2EndpointId.MERLIN_V2_TESTNET;
    HOMEVERSE_V2_TESTNET: TestnetV2EndpointId.HOMEVERSE_V2_TESTNET;
    ZKASTAR_V2_TESTNET: TestnetV2EndpointId.ZKASTAR_V2_TESTNET;
    AMOY_V2_TESTNET: TestnetV2EndpointId.AMOY_V2_TESTNET;
    DEGEN_V2_TESTNET: TestnetV2EndpointId.DEGEN_V2_TESTNET;
    XLAYER_V2_TESTNET: TestnetV2EndpointId.XLAYER_V2_TESTNET;
    FORM_V2_TESTNET: TestnetV2EndpointId.FORM_V2_TESTNET;
    LL1_V2_TESTNET: TestnetV2EndpointId.LL1_V2_TESTNET;
    MANTASEP_V2_TESTNET: TestnetV2EndpointId.MANTASEP_V2_TESTNET;
    SKALE_V2_TESTNET: TestnetV2EndpointId.SKALE_V2_TESTNET;
    TAIKO_V2_TESTNET: TestnetV2EndpointId.TAIKO_V2_TESTNET;
    ZIRCUIT_V2_TESTNET: TestnetV2EndpointId.ZIRCUIT_V2_TESTNET;
    CAMP_V2_TESTNET: TestnetV2EndpointId.CAMP_V2_TESTNET;
    OLIVE_V2_TESTNET: TestnetV2EndpointId.OLIVE_V2_TESTNET;
    SANKO_V2_TESTNET: TestnetV2EndpointId.SANKO_V2_TESTNET;
    BOB_V2_TESTNET: TestnetV2EndpointId.BOB_V2_TESTNET;
    CYBER_V2_TESTNET: TestnetV2EndpointId.CYBER_V2_TESTNET;
    BOTANIX_V2_TESTNET: TestnetV2EndpointId.BOTANIX_V2_TESTNET;
    XCHAIN_V2_TESTNET: TestnetV2EndpointId.XCHAIN_V2_TESTNET;
    ZKLINK_V2_TESTNET: TestnetV2EndpointId.ZKLINK_V2_TESTNET;
    EBI_V2_TESTNET: TestnetV2EndpointId.EBI_V2_TESTNET;
    HEDERA_V2_TESTNET: TestnetV2EndpointId.HEDERA_V2_TESTNET;
    DOS_V2_TESTNET: TestnetV2EndpointId.DOS_V2_TESTNET;
    LINEASEP_V2_TESTNET: TestnetV2EndpointId.LINEASEP_V2_TESTNET;
    BESU1_V2_TESTNET: TestnetV2EndpointId.BESU1_V2_TESTNET;
    BOUNCEBIT_V2_TESTNET: TestnetV2EndpointId.BOUNCEBIT_V2_TESTNET;
    MORPH_V2_TESTNET: TestnetV2EndpointId.MORPH_V2_TESTNET;
    SOLANA_V2_TESTNET: TestnetV2EndpointId.SOLANA_V2_TESTNET;
    ETHEREUM_V2_MAINNET: MainnetV2EndpointId.ETHEREUM_V2_MAINNET;
    BSC_V2_MAINNET: MainnetV2EndpointId.BSC_V2_MAINNET;
    AVALANCHE_V2_MAINNET: MainnetV2EndpointId.AVALANCHE_V2_MAINNET;
    POLYGON_V2_MAINNET: MainnetV2EndpointId.POLYGON_V2_MAINNET;
    ARBITRUM_V2_MAINNET: MainnetV2EndpointId.ARBITRUM_V2_MAINNET;
    OPTIMISM_V2_MAINNET: MainnetV2EndpointId.OPTIMISM_V2_MAINNET;
    FANTOM_V2_MAINNET: MainnetV2EndpointId.FANTOM_V2_MAINNET;
    SWIMMER_V2_MAINNET: MainnetV2EndpointId.SWIMMER_V2_MAINNET;
    DFK_V2_MAINNET: MainnetV2EndpointId.DFK_V2_MAINNET;
    HARMONY_V2_MAINNET: MainnetV2EndpointId.HARMONY_V2_MAINNET;
    DEXALOT_V2_MAINNET: MainnetV2EndpointId.DEXALOT_V2_MAINNET;
    CELO_V2_MAINNET: MainnetV2EndpointId.CELO_V2_MAINNET;
    MOONBEAM_V2_MAINNET: MainnetV2EndpointId.MOONBEAM_V2_MAINNET;
    INTAIN_V2_MAINNET: MainnetV2EndpointId.INTAIN_V2_MAINNET;
    FUSE_V2_MAINNET: MainnetV2EndpointId.FUSE_V2_MAINNET;
    GNOSIS_V2_MAINNET: MainnetV2EndpointId.GNOSIS_V2_MAINNET;
    KLAYTN_V2_MAINNET: MainnetV2EndpointId.KLAYTN_V2_MAINNET;
    METIS_V2_MAINNET: MainnetV2EndpointId.METIS_V2_MAINNET;
    COREDAO_V2_MAINNET: MainnetV2EndpointId.COREDAO_V2_MAINNET;
    GOERLI_V2_MAINNET: MainnetV2EndpointId.GOERLI_V2_MAINNET;
    OKX_V2_MAINNET: MainnetV2EndpointId.OKX_V2_MAINNET;
    CANTO_V2_MAINNET: MainnetV2EndpointId.CANTO_V2_MAINNET;
    ZKSYNC_V2_MAINNET: MainnetV2EndpointId.ZKSYNC_V2_MAINNET;
    SHRAPNEL_V2_MAINNET: MainnetV2EndpointId.SHRAPNEL_V2_MAINNET;
    DOS_V2_MAINNET: MainnetV2EndpointId.DOS_V2_MAINNET;
    ZKPOLYGON_V2_MAINNET: MainnetV2EndpointId.ZKPOLYGON_V2_MAINNET;
    SEPOLIA_V2_MAINNET: MainnetV2EndpointId.SEPOLIA_V2_MAINNET;
    MOONRIVER_V2_MAINNET: MainnetV2EndpointId.MOONRIVER_V2_MAINNET;
    TENET_V2_MAINNET: MainnetV2EndpointId.TENET_V2_MAINNET;
    NOVA_V2_MAINNET: MainnetV2EndpointId.NOVA_V2_MAINNET;
    METER_V2_MAINNET: MainnetV2EndpointId.METER_V2_MAINNET;
    KAVA_V2_MAINNET: MainnetV2EndpointId.KAVA_V2_MAINNET;
    MANTLE_V2_MAINNET: MainnetV2EndpointId.MANTLE_V2_MAINNET;
    HUBBLE_V2_MAINNET: MainnetV2EndpointId.HUBBLE_V2_MAINNET;
    ZKCONSENSYS_V2_MAINNET: MainnetV2EndpointId.ZKCONSENSYS_V2_MAINNET;
    BASE_V2_MAINNET: MainnetV2EndpointId.BASE_V2_MAINNET;
    ZORA_V2_MAINNET: MainnetV2EndpointId.ZORA_V2_MAINNET;
    TOMO_V2_MAINNET: MainnetV2EndpointId.TOMO_V2_MAINNET;
    LOOT_V2_MAINNET: MainnetV2EndpointId.LOOT_V2_MAINNET;
    MERITCIRCLE_V2_MAINNET: MainnetV2EndpointId.MERITCIRCLE_V2_MAINNET;
    TELOS_V2_MAINNET: MainnetV2EndpointId.TELOS_V2_MAINNET;
    OPBNB_V2_MAINNET: MainnetV2EndpointId.OPBNB_V2_MAINNET;
    LIF3_V2_MAINNET: MainnetV2EndpointId.LIF3_V2_MAINNET;
    ASTAR_V2_MAINNET: MainnetV2EndpointId.ASTAR_V2_MAINNET;
    AURORA_V2_MAINNET: MainnetV2EndpointId.AURORA_V2_MAINNET;
    CONFLUX_V2_MAINNET: MainnetV2EndpointId.CONFLUX_V2_MAINNET;
    ORDERLY_V2_MAINNET: MainnetV2EndpointId.ORDERLY_V2_MAINNET;
    SCROLL_V2_MAINNET: MainnetV2EndpointId.SCROLL_V2_MAINNET;
    EON_V2_MAINNET: MainnetV2EndpointId.EON_V2_MAINNET;
    XPLA_V2_MAINNET: MainnetV2EndpointId.XPLA_V2_MAINNET;
    MANTA_V2_MAINNET: MainnetV2EndpointId.MANTA_V2_MAINNET;
    PGN_V2_MAINNET: MainnetV2EndpointId.PGN_V2_MAINNET;
    SHIMMER_V2_MAINNET: MainnetV2EndpointId.SHIMMER_V2_MAINNET;
    BB1_V2_MAINNET: MainnetV2EndpointId.BB1_V2_MAINNET;
    RARIBLE_V2_MAINNET: MainnetV2EndpointId.RARIBLE_V2_MAINNET;
    XAI_V2_MAINNET: MainnetV2EndpointId.XAI_V2_MAINNET;
    REAL_V2_MAINNET: MainnetV2EndpointId.REAL_V2_MAINNET;
    TILTYARD_V2_MAINNET: MainnetV2EndpointId.TILTYARD_V2_MAINNET;
    FRAXTAL_V2_MAINNET: MainnetV2EndpointId.FRAXTAL_V2_MAINNET;
    TRON_V2_MAINNET: MainnetV2EndpointId.TRON_V2_MAINNET;
    ZKATANA_V2_MAINNET: MainnetV2EndpointId.ZKATANA_V2_MAINNET;
    BLAST_V2_MAINNET: MainnetV2EndpointId.BLAST_V2_MAINNET;
    MODE_V2_MAINNET: MainnetV2EndpointId.MODE_V2_MAINNET;
    MASA_V2_MAINNET: MainnetV2EndpointId.MASA_V2_MAINNET;
    HOMEVERSE_V2_MAINNET: MainnetV2EndpointId.HOMEVERSE_V2_MAINNET;
    MERLIN_V2_MAINNET: MainnetV2EndpointId.MERLIN_V2_MAINNET;
    DEGEN_V2_MAINNET: MainnetV2EndpointId.DEGEN_V2_MAINNET;
    SKALE_V2_MAINNET: MainnetV2EndpointId.SKALE_V2_MAINNET;
    XLAYER_V2_MAINNET: MainnetV2EndpointId.XLAYER_V2_MAINNET;
    SANKO_V2_MAINNET: MainnetV2EndpointId.SANKO_V2_MAINNET;
    BOB_V2_MAINNET: MainnetV2EndpointId.BOB_V2_MAINNET;
    SEI_V2_MAINNET: MainnetV2EndpointId.SEI_V2_MAINNET;
    EBI_V2_MAINNET: MainnetV2EndpointId.EBI_V2_MAINNET;
    CYBER_V2_MAINNET: MainnetV2EndpointId.CYBER_V2_MAINNET;
    IOTA_V2_MAINNET: MainnetV2EndpointId.IOTA_V2_MAINNET;
    SOLANA_V2_MAINNET: MainnetV2EndpointId.SOLANA_V2_MAINNET;
    KINTO_V2_MAINNET: MainnetV2EndpointId.KINTO_V2_MAINNET;
    JOC_V2_MAINNET: MainnetV2EndpointId.JOC_V2_MAINNET;
    TAIKO_V2_MAINNET: MainnetV2EndpointId.TAIKO_V2_MAINNET;
    XCHAIN_V2_MAINNET: MainnetV2EndpointId.XCHAIN_V2_MAINNET;
    ETHERLINK_V2_MAINNET: MainnetV2EndpointId.ETHERLINK_V2_MAINNET;
    BSC_SANDBOX: SandboxEndpointId.BSC_SANDBOX;
    AVALANCHE_SANDBOX: SandboxEndpointId.AVALANCHE_SANDBOX;
    POLYGON_SANDBOX: SandboxEndpointId.POLYGON_SANDBOX;
    ETHEREUM_SANDBOX: SandboxEndpointId.ETHEREUM_SANDBOX;
    APTOS_SANDBOX: SandboxEndpointId.APTOS_SANDBOX;
    OPTIMISM_SANDBOX: SandboxEndpointId.OPTIMISM_SANDBOX;
    TRON_SANDBOX: SandboxEndpointId.TRON_SANDBOX;
    TRONDEV_SANDBOX: SandboxEndpointId.TRONDEV_SANDBOX;
    ARBITRUM_SANDBOX: SandboxEndpointId.ARBITRUM_SANDBOX;
    FANTOM_SANDBOX: SandboxEndpointId.FANTOM_SANDBOX;
    METIS_SANDBOX: SandboxEndpointId.METIS_SANDBOX;
    BSC_TESTNET: TestnetEndpointId.BSC_TESTNET;
    AVALANCHE_TESTNET: TestnetEndpointId.AVALANCHE_TESTNET;
    POLYGON_TESTNET: TestnetEndpointId.POLYGON_TESTNET;
    FANTOM_TESTNET: TestnetEndpointId.FANTOM_TESTNET;
    SWIMMER_TESTNET: TestnetEndpointId.SWIMMER_TESTNET;
    DFK_TESTNET: TestnetEndpointId.DFK_TESTNET;
    HARMONY_TESTNET: TestnetEndpointId.HARMONY_TESTNET;
    DEXALOT_TESTNET: TestnetEndpointId.DEXALOT_TESTNET;
    CELO_TESTNET: TestnetEndpointId.CELO_TESTNET;
    MOONBEAM_TESTNET: TestnetEndpointId.MOONBEAM_TESTNET;
    INTAIN_TESTNET: TestnetEndpointId.INTAIN_TESTNET;
    ETHEREUM_TESTNET: TestnetEndpointId.ETHEREUM_TESTNET;
    ARBITRUM_TESTNET: TestnetEndpointId.ARBITRUM_TESTNET;
    OPTIMISM_TESTNET: TestnetEndpointId.OPTIMISM_TESTNET;
    FUSE_TESTNET: TestnetEndpointId.FUSE_TESTNET;
    GNOSIS_TESTNET: TestnetEndpointId.GNOSIS_TESTNET;
    ZKSYNC_TESTNET: TestnetEndpointId.ZKSYNC_TESTNET;
    SHRAPNEL_TESTNET: TestnetEndpointId.SHRAPNEL_TESTNET;
    DOS_TESTNET: TestnetEndpointId.DOS_TESTNET;
    APTOS_TESTNET: TestnetEndpointId.APTOS_TESTNET;
    KLAYTN_TESTNET: TestnetEndpointId.KLAYTN_TESTNET;
    METIS_TESTNET: TestnetEndpointId.METIS_TESTNET;
    COREDAO_TESTNET: TestnetEndpointId.COREDAO_TESTNET;
    OKX_TESTNET: TestnetEndpointId.OKX_TESTNET;
    METER_TESTNET: TestnetEndpointId.METER_TESTNET;
    ZKCONSENSYS_TESTNET: TestnetEndpointId.ZKCONSENSYS_TESTNET;
    ZKPOLYGON_TESTNET: TestnetEndpointId.ZKPOLYGON_TESTNET;
    CANTO_TESTNET: TestnetEndpointId.CANTO_TESTNET;
    BASE_TESTNET: TestnetEndpointId.BASE_TESTNET;
    SEPOLIA_TESTNET: TestnetEndpointId.SEPOLIA_TESTNET;
    SOLANA_TESTNET: TestnetEndpointId.SOLANA_TESTNET;
    CATHAY_TESTNET: TestnetEndpointId.CATHAY_TESTNET;
    KAVA_TESTNET: TestnetEndpointId.KAVA_TESTNET;
    TENET_TESTNET: TestnetEndpointId.TENET_TESTNET;
    BLOCKGEN_TESTNET: TestnetEndpointId.BLOCKGEN_TESTNET;
    MERITCIRCLE_TESTNET: TestnetEndpointId.MERITCIRCLE_TESTNET;
    MANTLE_TESTNET: TestnetEndpointId.MANTLE_TESTNET;
    HUBBLE_TESTNET: TestnetEndpointId.HUBBLE_TESTNET;
    AAVEGOTCHI_TESTNET: TestnetEndpointId.AAVEGOTCHI_TESTNET;
    ZORA_TESTNET: TestnetEndpointId.ZORA_TESTNET;
    TOMO_TESTNET: TestnetEndpointId.TOMO_TESTNET;
    LOOT_TESTNET: TestnetEndpointId.LOOT_TESTNET;
    TELOS_TESTNET: TestnetEndpointId.TELOS_TESTNET;
    ORDERLY_TESTNET: TestnetEndpointId.ORDERLY_TESTNET;
    AURORA_TESTNET: TestnetEndpointId.AURORA_TESTNET;
    OPBNB_TESTNET: TestnetEndpointId.OPBNB_TESTNET;
    MONAD_TESTNET: TestnetEndpointId.MONAD_TESTNET;
    LIF3_TESTNET: TestnetEndpointId.LIF3_TESTNET;
    SPRUCE_TESTNET: TestnetEndpointId.SPRUCE_TESTNET;
    PGJJTK_TESTNET: TestnetEndpointId.PGJJTK_TESTNET;
    ODA_TESTNET: TestnetEndpointId.ODA_TESTNET;
    KIWI_TESTNET: TestnetEndpointId.KIWI_TESTNET;
    ASTAR_TESTNET: TestnetEndpointId.ASTAR_TESTNET;
    CONFLUX_TESTNET: TestnetEndpointId.CONFLUX_TESTNET;
    SCROLL_TESTNET: TestnetEndpointId.SCROLL_TESTNET;
    EON_TESTNET: TestnetEndpointId.EON_TESTNET;
    XPLA_TESTNET: TestnetEndpointId.XPLA_TESTNET;
    HOLESKY_TESTNET: TestnetEndpointId.HOLESKY_TESTNET;
    INJECTIVE_TESTNET: TestnetEndpointId.INJECTIVE_TESTNET;
    IDEX_TESTNET: TestnetEndpointId.IDEX_TESTNET;
    ZKATANA_TESTNET: TestnetEndpointId.ZKATANA_TESTNET;
    MANTA_TESTNET: TestnetEndpointId.MANTA_TESTNET;
    FRAME_TESTNET: TestnetEndpointId.FRAME_TESTNET;
    PGN_TESTNET: TestnetEndpointId.PGN_TESTNET;
    POLYGONCDK_TESTNET: TestnetEndpointId.POLYGONCDK_TESTNET;
    SHIMMER_TESTNET: TestnetEndpointId.SHIMMER_TESTNET;
    ARBSEP_TESTNET: TestnetEndpointId.ARBSEP_TESTNET;
    OPTSEP_TESTNET: TestnetEndpointId.OPTSEP_TESTNET;
    VENN_TESTNET: TestnetEndpointId.VENN_TESTNET;
    RARIBLE_TESTNET: TestnetEndpointId.RARIBLE_TESTNET;
    GUNZILLA_TESTNET: TestnetEndpointId.GUNZILLA_TESTNET;
    RC1_TESTNET: TestnetEndpointId.RC1_TESTNET;
    ETHERLINK_TESTNET: TestnetEndpointId.ETHERLINK_TESTNET;
    KIWI2_TESTNET: TestnetEndpointId.KIWI2_TESTNET;
    JOC_TESTNET: TestnetEndpointId.JOC_TESTNET;
    BLAST_TESTNET: TestnetEndpointId.BLAST_TESTNET;
    BASESEP_TESTNET: TestnetEndpointId.BASESEP_TESTNET;
    MANTLESEP_TESTNET: TestnetEndpointId.MANTLESEP_TESTNET;
    ZKPOLYGONSEP_TESTNET: TestnetEndpointId.ZKPOLYGONSEP_TESTNET;
    ZKSYNCSEP_TESTNET: TestnetEndpointId.ZKSYNCSEP_TESTNET;
    ZORASEP_TESTNET: TestnetEndpointId.ZORASEP_TESTNET;
    XAI_TESTNET: TestnetEndpointId.XAI_TESTNET;
    TANGIBLE_TESTNET: TestnetEndpointId.TANGIBLE_TESTNET;
    TRON_TESTNET: TestnetEndpointId.TRON_TESTNET;
    FRAXTAL_TESTNET: TestnetEndpointId.FRAXTAL_TESTNET;
    BERA_TESTNET: TestnetEndpointId.BERA_TESTNET;
    SEI_TESTNET: TestnetEndpointId.SEI_TESTNET;
    EXOCORE_TESTNET: TestnetEndpointId.EXOCORE_TESTNET;
    MODE_TESTNET: TestnetEndpointId.MODE_TESTNET;
    UNREAL_TESTNET: TestnetEndpointId.UNREAL_TESTNET;
    MASA_TESTNET: TestnetEndpointId.MASA_TESTNET;
    MERLIN_TESTNET: TestnetEndpointId.MERLIN_TESTNET;
    HOMEVERSE_TESTNET: TestnetEndpointId.HOMEVERSE_TESTNET;
    ZKASTAR_TESTNET: TestnetEndpointId.ZKASTAR_TESTNET;
    AMOY_TESTNET: TestnetEndpointId.AMOY_TESTNET;
    DEGEN_TESTNET: TestnetEndpointId.DEGEN_TESTNET;
    XLAYER_TESTNET: TestnetEndpointId.XLAYER_TESTNET;
    FORM_TESTNET: TestnetEndpointId.FORM_TESTNET;
    LL1_TESTNET: TestnetEndpointId.LL1_TESTNET;
    MANTASEP_TESTNET: TestnetEndpointId.MANTASEP_TESTNET;
    SKALE_TESTNET: TestnetEndpointId.SKALE_TESTNET;
    TAIKO_TESTNET: TestnetEndpointId.TAIKO_TESTNET;
    ZIRCUIT_TESTNET: TestnetEndpointId.ZIRCUIT_TESTNET;
    CAMP_TESTNET: TestnetEndpointId.CAMP_TESTNET;
    OLIVE_TESTNET: TestnetEndpointId.OLIVE_TESTNET;
    SANKO_TESTNET: TestnetEndpointId.SANKO_TESTNET;
    BOB_TESTNET: TestnetEndpointId.BOB_TESTNET;
    CYBER_TESTNET: TestnetEndpointId.CYBER_TESTNET;
    BOTANIX_TESTNET: TestnetEndpointId.BOTANIX_TESTNET;
    XCHAIN_TESTNET: TestnetEndpointId.XCHAIN_TESTNET;
    ZKLINK_TESTNET: TestnetEndpointId.ZKLINK_TESTNET;
    EBI_TESTNET: TestnetEndpointId.EBI_TESTNET;
    HEDERA_TESTNET: TestnetEndpointId.HEDERA_TESTNET;
    LINEASEP_TESTNET: TestnetEndpointId.LINEASEP_TESTNET;
    BESU1_TESTNET: TestnetEndpointId.BESU1_TESTNET;
    BOUNCEBIT_TESTNET: TestnetEndpointId.BOUNCEBIT_TESTNET;
    MORPH_TESTNET: TestnetEndpointId.MORPH_TESTNET;
    ETHEREUM_MAINNET: MainnetEndpointId.ETHEREUM_MAINNET;
    BSC_MAINNET: MainnetEndpointId.BSC_MAINNET;
    AVALANCHE_MAINNET: MainnetEndpointId.AVALANCHE_MAINNET;
    POLYGON_MAINNET: MainnetEndpointId.POLYGON_MAINNET;
    ARBITRUM_MAINNET: MainnetEndpointId.ARBITRUM_MAINNET;
    OPTIMISM_MAINNET: MainnetEndpointId.OPTIMISM_MAINNET;
    FANTOM_MAINNET: MainnetEndpointId.FANTOM_MAINNET;
    SWIMMER_MAINNET: MainnetEndpointId.SWIMMER_MAINNET;
    DFK_MAINNET: MainnetEndpointId.DFK_MAINNET;
    HARMONY_MAINNET: MainnetEndpointId.HARMONY_MAINNET;
    DEXALOT_MAINNET: MainnetEndpointId.DEXALOT_MAINNET;
    CELO_MAINNET: MainnetEndpointId.CELO_MAINNET;
    MOONBEAM_MAINNET: MainnetEndpointId.MOONBEAM_MAINNET;
    INTAIN_MAINNET: MainnetEndpointId.INTAIN_MAINNET;
    FUSE_MAINNET: MainnetEndpointId.FUSE_MAINNET;
    GNOSIS_MAINNET: MainnetEndpointId.GNOSIS_MAINNET;
    APTOS_MAINNET: MainnetEndpointId.APTOS_MAINNET;
    KLAYTN_MAINNET: MainnetEndpointId.KLAYTN_MAINNET;
    METIS_MAINNET: MainnetEndpointId.METIS_MAINNET;
    COREDAO_MAINNET: MainnetEndpointId.COREDAO_MAINNET;
    GOERLI_MAINNET: MainnetEndpointId.GOERLI_MAINNET;
    OKX_MAINNET: MainnetEndpointId.OKX_MAINNET;
    CANTO_MAINNET: MainnetEndpointId.CANTO_MAINNET;
    ZKSYNC_MAINNET: MainnetEndpointId.ZKSYNC_MAINNET;
    SHRAPNEL_MAINNET: MainnetEndpointId.SHRAPNEL_MAINNET;
    DOS_MAINNET: MainnetEndpointId.DOS_MAINNET;
    ZKPOLYGON_MAINNET: MainnetEndpointId.ZKPOLYGON_MAINNET;
    SEPOLIA_MAINNET: MainnetEndpointId.SEPOLIA_MAINNET;
    MOONRIVER_MAINNET: MainnetEndpointId.MOONRIVER_MAINNET;
    SOLANA_MAINNET: MainnetEndpointId.SOLANA_MAINNET;
    TENET_MAINNET: MainnetEndpointId.TENET_MAINNET;
    NOVA_MAINNET: MainnetEndpointId.NOVA_MAINNET;
    METER_MAINNET: MainnetEndpointId.METER_MAINNET;
    KAVA_MAINNET: MainnetEndpointId.KAVA_MAINNET;
    MANTLE_MAINNET: MainnetEndpointId.MANTLE_MAINNET;
    HUBBLE_MAINNET: MainnetEndpointId.HUBBLE_MAINNET;
    ZKCONSENSYS_MAINNET: MainnetEndpointId.ZKCONSENSYS_MAINNET;
    BASE_MAINNET: MainnetEndpointId.BASE_MAINNET;
    ZORA_MAINNET: MainnetEndpointId.ZORA_MAINNET;
    TOMO_MAINNET: MainnetEndpointId.TOMO_MAINNET;
    LOOT_MAINNET: MainnetEndpointId.LOOT_MAINNET;
    MERITCIRCLE_MAINNET: MainnetEndpointId.MERITCIRCLE_MAINNET;
    TELOS_MAINNET: MainnetEndpointId.TELOS_MAINNET;
    OPBNB_MAINNET: MainnetEndpointId.OPBNB_MAINNET;
    LIF3_MAINNET: MainnetEndpointId.LIF3_MAINNET;
    ASTAR_MAINNET: MainnetEndpointId.ASTAR_MAINNET;
    AURORA_MAINNET: MainnetEndpointId.AURORA_MAINNET;
    CONFLUX_MAINNET: MainnetEndpointId.CONFLUX_MAINNET;
    ORDERLY_MAINNET: MainnetEndpointId.ORDERLY_MAINNET;
    SCROLL_MAINNET: MainnetEndpointId.SCROLL_MAINNET;
    EON_MAINNET: MainnetEndpointId.EON_MAINNET;
    XPLA_MAINNET: MainnetEndpointId.XPLA_MAINNET;
    MANTA_MAINNET: MainnetEndpointId.MANTA_MAINNET;
    PGN_MAINNET: MainnetEndpointId.PGN_MAINNET;
    SHIMMER_MAINNET: MainnetEndpointId.SHIMMER_MAINNET;
    BB1_MAINNET: MainnetEndpointId.BB1_MAINNET;
    RARIBLE_MAINNET: MainnetEndpointId.RARIBLE_MAINNET;
    XAI_MAINNET: MainnetEndpointId.XAI_MAINNET;
    REAL_MAINNET: MainnetEndpointId.REAL_MAINNET;
    TILTYARD_MAINNET: MainnetEndpointId.TILTYARD_MAINNET;
    FRAXTAL_MAINNET: MainnetEndpointId.FRAXTAL_MAINNET;
    TRON_MAINNET: MainnetEndpointId.TRON_MAINNET;
    ZKATANA_MAINNET: MainnetEndpointId.ZKATANA_MAINNET;
    BLAST_MAINNET: MainnetEndpointId.BLAST_MAINNET;
    MODE_MAINNET: MainnetEndpointId.MODE_MAINNET;
    MASA_MAINNET: MainnetEndpointId.MASA_MAINNET;
    HOMEVERSE_MAINNET: MainnetEndpointId.HOMEVERSE_MAINNET;
    MERLIN_MAINNET: MainnetEndpointId.MERLIN_MAINNET;
    DEGEN_MAINNET: MainnetEndpointId.DEGEN_MAINNET;
    SKALE_MAINNET: MainnetEndpointId.SKALE_MAINNET;
    XLAYER_MAINNET: MainnetEndpointId.XLAYER_MAINNET;
    SANKO_MAINNET: MainnetEndpointId.SANKO_MAINNET;
    BOB_MAINNET: MainnetEndpointId.BOB_MAINNET;
    SEI_MAINNET: MainnetEndpointId.SEI_MAINNET;
    EBI_MAINNET: MainnetEndpointId.EBI_MAINNET;
    CYBER_MAINNET: MainnetEndpointId.CYBER_MAINNET;
    IOTA_MAINNET: MainnetEndpointId.IOTA_MAINNET;
    KINTO_MAINNET: MainnetEndpointId.KINTO_MAINNET;
    JOC_MAINNET: MainnetEndpointId.JOC_MAINNET;
    TAIKO_MAINNET: MainnetEndpointId.TAIKO_MAINNET;
    XCHAIN_MAINNET: MainnetEndpointId.XCHAIN_MAINNET;
    ETHERLINK_MAINNET: MainnetEndpointId.ETHERLINK_MAINNET;
};
type EndpointId = MainnetEndpointId | TestnetEndpointId | SandboxEndpointId | MainnetV2EndpointId | TestnetV2EndpointId | SandboxV2EndpointId;

declare enum Environment {
    LOCAL = "local",
    DEVNET = "devnet",
    TESTNET = "testnet",
    MAINNET = "mainnet"
}

declare enum Stage {
    MAINNET = "mainnet",
    TESTNET = "testnet",
    SANDBOX = "sandbox"
}

declare enum EndpointVersion {
    V1 = "v1",
    V2 = "v2"
}

declare enum MessageLibVersionV2 {
    SIMPLE = "0.0.2",
    ULTRA_LIGHT_NODE_302 = "3.0.2"
}
declare enum MessageLibVersionV1 {
    ULTRA_LIGHT_NODE_301 = "3.0.1",
    ULTRA_LIGHT_NODE_201 = "2.0.1"
}
type MessageLibVersion = MessageLibVersionV2 | MessageLibVersionV1;

declare enum ChainKey {
    ETHEREUM = "ethereum",
    GOERLI = "goerli",
    SEPOLIA = "sepolia",
    BSC = "bsc",
    BSC_TESTNET = "bsc-testnet",
    AVALANCHE = "avalanche",
    FUJI = "fuji",
    POLYGON = "polygon",
    MUMBAI = "mumbai",
    ARBITRUM = "arbitrum",
    ARBITURM_GOERLI = "arbitrum-goerli",
    OPTIMISM = "optimism",
    OPTIMISM_GOERLI = "optimism-goerli",
    FANTOM = "fantom",
    FANTOM_TESTNET = "fantom-testnet",
    SWIMMER = "swimmer",
    SWIMMER_TESTNET = "swimmer-testnet",
    DFK = "dfk",
    DFK_TESTNET = "dfk-testnet",
    HARMONY = "harmony",
    HARMONY_TESTNET = "harmony-testnet",
    DEXALOT = "dexalot",
    DEVALOT_TESTNET = "dexalot-testnet",
    CELO = "celo",
    ALFAJORES = "alfajores",
    MOONBEAM = "moonbeam",
    MOONBASE = "moonbase",
    MOONRIVER = "moonriver",
    INTAIN = "intain",
    INTAIN_TESTNET = "intain-testnet",
    FUSE = "fuse",
    FUSESPARK = "fusespark",
    GNOSIS = "gnosis",
    CHIADO = "chiado",
    APTOS = "aptos",
    APTOS_TESTNET = "aptos-testnet",
    KLAYTN = "klaytn",
    KLAYTN_BAOBAB = "klaytn-baobab",
    METIS = "metis",
    METIS_GOERLI = "metis-goerli",
    COREDAO = "coredao",
    COREDAO_TESTNET = "coredao-testnet",
    METER = "meter",
    METER_TESTNET = "meter-testnet",
    OKX = "okx",
    OKX_TESTNET = "okx-testnet",
    ZKSYNC = "zksync",
    ZKSYNC_TESTNET = "zksync-testnet",
    SHRAPNEL = "shrapnel",
    SHRAPNEL_TESTNET = "shrapnel-testnet",
    DOS = "dos",
    DOS_TESTNET = "dos-testnet",
    ZKEVM = "zkevm",
    ZKEVM_TESTNET = "zkevm-testnet",
    NOVA = "nova",
    TENET = "tenet",
    TENET_TESTNET = "tenet-testnet",
    CANTO = "canto",
    CANTO_TESTNET = "canto-testnet",
    KAVA = "kava",
    KAVA_TESTNET = "kava-testnet",
    SOLANA = "solana",
    SOLANA_TESTNET = "solana-testnet",
    LINEA_GOERLI = "linea-goerli",
    BASE_GOERLI = "base-goerli",
    AAVEGOTCHI_TESTNET = "aavegotchi-testnet",
    SCROLL = "scroll",
    SCROLL_TESTNET = "scroll-testnet",
    CATHAY_TESTNET = "cathay-testnet",
    ORDERLY = "orderly",
    ORDERLY_TESTNET = "orderly-testnet",
    BLOCKGEN_TESTNET = "blockgen-testnet",
    BEAM_TESTNET = "beam-testnet",
    BEAM = "beam",
    MANTLE = "mantle",
    MANTLE_TESTNET = "mantle-testnet",
    HUBBLE = "hubble",
    HUBBLE_TESTNET = "hubble-testnet",
    LINEA = "linea",
    BASE = "base",
    ZORA_TESTNET = "zora-testnet",
    ZORA = "zora",
    TOMO_TESTNET = "tomo-testnet",
    TOMO = "tomo",
    LOOT_TESTNET = "loot-testnet",
    LOOT = "loot",
    TELOS_TESTNET = "telos-testnet",
    TELOS = "telos",
    AURORA = "aurora",
    AURORA_TESTNET = "aurora-testnet",
    OPBNB = "opbnb",
    OPBNB_TESTNET = "opbnb-testnet",
    SHIMMER = "shimmer",
    SHIMMER_TESTNET = "shimmer-testnet",
    MONAD_TESTNET = "monad-testnet",
    LIF3 = "lif3",
    LIF3_TESTNET = "lif3-testnet",
    SPRUCE_TESTNET = "spruce-testnet",
    PGJJTK_TESTNET = "pgjjtk-testnet",
    ODA_TESTNET = "oda-testnet",
    KIWI_TESTNET = "kiwi-testnet",
    ASTAR = "astar",
    ASTAR_TESTNET = "astar-testnet",
    CONFLUX = "conflux",
    CONFLUX_TESTNET = "conflux-testnet",
    EON = "eon",
    EON_TESTNET = "eon-testnet",
    XPLA = "xpla",
    XPLA_TESTNET = "xpla-testnet",
    HOLESKY = "holesky",
    INJECTIVE_TESTNET = "injective-testnet",
    IDEX_TESTNET = "idex-testnet",
    ZKATANA_TESTNET = "zkatana-testnet",
    ZKATANA = "zkatana",
    MANTA = "manta",
    MANTA_TESTNET = "manta-testnet",
    FRAME_TESTNET = "frame-testnet",
    PGN = "pgn",
    PGN_TESTNET = "pgn-testnet",
    POLYGONCDK_TESTNET = "polygoncdk-testnet",
    ARBITRUM_SEPOLIA = "arbitrum-sepolia",
    OPTIMISM_SEPOLIA = "optimism-sepolia",
    BERA_TESTNET = "bera-testnet",
    VENN_TESTNET = "venn-testnet",
    RARIBLE_TESTNET = "rarible-testnet",
    GUNZILLA_TESTNET = "gunzilla-testnet",
    RC1_TESTNET = "rc1-testnet",
    KIWI2_TESTNET = "kiwi2-testnet",
    BB1 = "bb1",
    RARIBLE = "rarible",
    BLAST_TESTNET = "blast-testnet",
    BLAST = "blast",
    XAI_TESTNET = "xai-testnet",
    XAI = "xai",
    TANGIBLE_TESTNET = "tangible-testnet",
    BASE_SEPOLIA = "base-sepolia",
    MANTLE_SEPOLIA = "mantle-sepolia",
    ZKPOLYGON_SEPOLIA = "zkpolygon-sepolia",
    ZKSYNC_SEPOLIA = "zksync-sepolia",
    ZORA_SEPOLIA = "zora-sepolia",
    EXOCORE_TESTNET = "exocore-testnet",
    TILTYARD = "tiltyard",
    FRAXTAL_TESTNET = "fraxtal-testnet",
    FRAXTAL = "fraxtal",
    MODE_TESTNET = "mode-testnet",
    MODE = "mode",
    HEDERA_TESTNET = "hedera-testnet",
    REAL = "real",
    UNREAL_TESTNET = "unreal-testnet",
    MASA = "masa",
    MASA_TESTNET = "masa-testnet",
    MERLIN_TESTNET = "merlin-testnet",
    MERLIN = "merlin",
    HOMEVERSE = "homeverse",
    HOMEVERSE_TESTNET = "homeverse-testnet",
    ZKASTAR_TESTNET = "zkastar-testnet",
    AMOY_TESTNET = "amoy-testnet",
    DEGEN_TESTNET = "degen-testnet",
    DEGEN = "degen",
    XLAYER_TESTNET = "xlayer-testnet",
    XLAYER = "xlayer",
    FORM_TESTNET = "form-testnet",
    LL1_TESTNET = "ll1-testnet",
    MANTASEP_TESTNET = "mantasep-testnet",
    SKALE_TESTNET = "skale-testnet",
    SKALE = "skale",
    ZIRCUIT_TESTNET = "zircuit-testnet",
    CAMP_TESTNET = "camp-testnet",
    OLIVE_TESTNET = "olive-testnet",
    SANKO_TESTNET = "sanko-testnet",
    SANKO = "sanko",
    BOB_TESTNET = "bob-testnet",
    BOB = "bob",
    ETHEREUM_SANDBOX = "ethereum-sandbox",
    BSC_SANDBOX = "bsc-sandbox",
    AVALANCHE_SANDBOX = "avalanche-sandbox",
    POLYGON_SANDBOX = "polygon-sandbox",
    APTOS_SANDBOX = "aptos-sandbox",
    OPTIMISM_SANDBOX = "optimism-sandbox",
    TRON_SANDBOX = "tron-sandbox",
    ARBITRUM_SANDBOX = "arbitrum-sandbox",
    FANTOM_SANDBOX = "fantom-sandbox",
    METIS_SANDBOX = "metis-sandbox",
    SOLANA_SANDBOX = "solana-sandbox",
    BOTANIX_TESTNET = "botanix-testnet",
    ZKLINK_TESTNET = "zklink-testnet",
    EBI_TESTNET = "ebi-testnet",
    TRONDEV = "tron-dev",
    TRON_TESTNET = "tron-testnet",
    TRON = "tron",
    SEI = "sei",
    SEI_TESTNET = "sei-testnet",
    EBI = "ebi",
    LINEASEP_TESTNET = "lineasep-testnet",
    IOTA = "iota",
    CYBER = "cyber",
    CYBER_TESTNET = "cyber-testnet",
    JOC = "joc",
    JOC_TESTNET = "joc-testnet",
    BESU1_TESTNET = "besu1-testnet",
    BOUNCEBIT_TESTNET = "bouncebit-testnet",
    MORPH_TESTNET = "morph-testnet",
    XCHAIN_TESTNET = "xchain-testnet",
    XCHAIN = "xchain",
    TAIKO_TESTNET = "taiko-testnet",
    TAIKO = "taiko",
    KINTO = "kinto",
    ETHERLINK_TESTNET = "etherlink-testnet",
    ETHERLINK = "etherlink"
}

declare const CHAIN_KEY: {
    [endpointId in EndpointId]: ChainKey;
};

declare const ENVIRONMENT: {
    [endpointId in EndpointId]: Environment;
};

declare const ULN_V1_CHAINS: (MainnetEndpointId | TestnetEndpointId | SandboxEndpointId)[];

type Network = `${Chain}-${Stage}${'-local' | ''}`;
interface EndpointDomain {
    chain: Chain;
    stage: Stage;
    version: EndpointVersion;
    isLocal: boolean;
}

declare function networkToEndpointId(network: string, version: EndpointVersion): number;
declare function networkToEnv(network: string, version: EndpointVersion): Environment;
declare function networkToStage(network: string): Stage;
declare function endpointIdToNetwork(endpointId: number, envOrIsLocal?: Environment | boolean): Network;
declare function endpointIdToVersion(endpointId: number): EndpointVersion;
declare function endpointIdToChainKey(endpointId: number): ChainKey;
declare function chainAndStageToEndpointId(chain: Chain, stage: Stage, version: EndpointVersion): EndpointId;
declare function chainAndStageToNetwork(chain: Chain, stage: Stage, envOrIsLocal?: Environment | boolean): Network;
declare function endpointDomainToNetwork(domain: EndpointDomain): Network;
declare function endpointDomainToEnv(domain: EndpointDomain): Environment;
declare function endpointDomainToEndpointId(domain: EndpointDomain): EndpointId;
declare function endpointIdToEndpointDomain(endpointId: EndpointId, isLocal?: boolean): EndpointDomain;
declare function networkToEndpointDomain(network: Network, version: EndpointVersion): EndpointDomain;
declare function networkToChain(network: string): Chain;
declare function networkToChainType(network: string): ChainType;
/**
 * Returns the chain family for a given chain
 * @param chain
 */
declare function getChainType(chain: Chain): ChainType;
declare function endpointIdToChain(endpointId: number): Chain;
declare function endpointIdToStage(endpointId: number): Stage;
declare function endpointIdToChainType(endpointId: number): ChainType;
declare function getNetworksForStage(stage: Stage): string[];
declare const getEndpointVersionForUlnVersion: (ulnVersion: string) => EndpointVersion;
declare function getChainIdForNetwork(chain: string, stage: string, ulnVersion: string): string;
declare function getNetworkForChainId(targetChainId: number): {
    chainName: Chain;
    env: Stage;
    ulnVersion: string;
};
declare function isNetworkEndpointIdSupported(network: string, endpointVersion: EndpointVersion): boolean;
/**
 * Determine if a chain is zkSync based.
 * @param {Chain} chain
 */
declare function isZKSyncBasedChain(chain: Chain): boolean;
/**
 * Determine if a chain is tron.
 * @param {Chain} chain
 */
declare function isTronChain(chain: Chain): boolean;
declare function isEvmChain(chain: Chain): boolean;
declare function isAptosChain(chain: Chain): boolean;
declare function isSolanaChain(chain: Chain): boolean;

export { AptosChain, CHAIN_KEY, Chain, ChainKey, ChainType, ENVIRONMENT, type EndpointDomain, EndpointId, EndpointV2IdBase, EndpointVersion, Environment, EvmChain, MainnetEndpointId, MainnetV2EndpointId, type MessageLibVersion, MessageLibVersionV1, MessageLibVersionV2, type Network, SandboxEndpointId, SandboxV2EndpointId, SolanaChain, Stage, TestnetEndpointId, TestnetV2EndpointId, ULN_V1_CHAINS, chainAndStageToEndpointId, chainAndStageToNetwork, endpointDomainToEndpointId, endpointDomainToEnv, endpointDomainToNetwork, endpointIdToChain, endpointIdToChainKey, endpointIdToChainType, endpointIdToEndpointDomain, endpointIdToNetwork, endpointIdToStage, endpointIdToVersion, getChainIdForNetwork, getChainType, getEndpointVersionForUlnVersion, getNetworkForChainId, getNetworksForStage, isAptosChain, isEvmChain, isNetworkEndpointIdSupported, isSolanaChain, isTronChain, isZKSyncBasedChain, networkToChain, networkToChainType, networkToEndpointDomain, networkToEndpointId, networkToEnv, networkToStage };
